// Code generated by MockGen. DO NOT EDIT.
// Source: fsm.go
//
// Generated by this command:
//
//	mockgen -source=fsm.go -destination=mock_game_server.go -package=fsm GameServer
//

// Package fsm is a generated GoMock package.
package fsm

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGameServer is a mock of GameServer interface.
type MockGameServer struct {
	ctrl     *gomock.Controller
	recorder *MockGameServerMockRecorder
}

// MockGameServerMockRecorder is the mock recorder for MockGameServer.
type MockGameServerMockRecorder struct {
	mock *MockGameServer
}

// NewMockGameServer creates a new mock instance.
func NewMockGameServer(ctrl *gomock.Controller) *MockGameServer {
	mock := &MockGameServer{ctrl: ctrl}
	mock.recorder = &MockGameServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameServer) EXPECT() *MockGameServerMockRecorder {
	return m.recorder
}

// IsRunning mocks base method.
func (m *MockGameServer) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockGameServerMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockGameServer)(nil).IsRunning))
}

// Render mocks base method.
func (m *MockGameServer) Render() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render")
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render.
func (mr *MockGameServerMockRecorder) Render() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockGameServer)(nil).Render))
}

// Start mocks base method.
func (m *MockGameServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockGameServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGameServer)(nil).Start))
}

// Stop mocks base method.
func (m *MockGameServer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockGameServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockGameServer)(nil).Stop))
}
